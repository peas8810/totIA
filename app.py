import re
import numpy as np
import pdfplumber
from fpdf import FPDF
from transformers import RobertaTokenizer, RobertaForSequenceClassification
import torch
import streamlit as st
import io
import requests
from datetime import datetime

# üîó URL da API gerada no Google Sheets
URL_GOOGLE_SHEETS = "https://script.google.com/macros/s/AKfycbyTpbWDxWkNRh_ZIlHuAVwZaCC2ODqTmo0Un7ZDbgzrVQBmxlYYKuoYf6yDigAPHZiZ/exec"

# =============================
# üìã Fun√ß√£o para Salvar E-mails no Google Sheets
# =============================
def salvar_email_google_sheets(nome, email, codigo="N/A"):
    dados = {"nome": nome, "email": email, "codigo": codigo}
    try:
        headers = {'Content-Type': 'application/json'}
        response = requests.post(URL_GOOGLE_SHEETS, json=dados, headers=headers)
        if response.text.strip() == "Sucesso":
            st.success("‚úÖ Seus dados foram registrados com sucesso!")
        else:
            st.error(f"‚ùå Falha ao salvar no Google Sheets: {response.text}")
    except Exception as e:
        st.error(f"‚ùå Erro na conex√£o com o Google Sheets: {e}")

# =============================
# üíæ Carregamento do Modelo Roberta (recurso pesado)
# =============================
@st.cache_resource
def load_model():
    tokenizer = RobertaTokenizer.from_pretrained('roberta-base')
    model = RobertaForSequenceClassification.from_pretrained('roberta-base')
    return tokenizer, model

try:
    tokenizer, model = load_model()
except Exception as e:
    st.error(f"Falha ao carregar o modelo Roberta: {e}")
    st.stop()

# =============================
# üîß Fun√ß√µes de An√°lise de Texto
# =============================
@st.cache_data
def preprocess_text(text: str) -> str:
    text = text.lower()
    text = re.sub(r'[^a-zA-Z0-9\s]', '', text)
    return re.sub(r'\s+', ' ', text).strip()

def analyze_text_roberta(text: str) -> float:
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=512)
    outputs = model(**inputs)
    prob = torch.softmax(outputs.logits, dim=1)[0, 1].item()
    return prob * 100

def calculate_entropy(text: str) -> float:
    probs = np.array([text.count(c) / len(text) for c in set(text)])
    return -np.sum(probs * np.log2(probs))

def analyze_text(text: str) -> dict:
    clean = preprocess_text(text)
    entropy = calculate_entropy(clean)
    roberta_score = analyze_text_roberta(clean)
    final_score = (roberta_score * 0.7) + (100 * (1 - entropy / 6) * 0.3)
    return {
        'IA (estimada)': f"{final_score:.2f}%",
        'Entropia': f"{entropy:.2f}",
        'Roberta (IA)': f"{roberta_score:.2f}%"
    }

# =============================
# üìÑ Fun√ß√µes de PDF (com encoding)
# =============================
def extract_text_from_pdf(pdf_file) -> str:
    text = ""
    with pdfplumber.open(io.BytesIO(pdf_file.read())) as pdf:
        for page in pdf.pages:
            text += page.extract_text() or ""
    return text

class PDFReport(FPDF):
    def _encode(self, txt: str) -> str:
        # substitui en-dash e em-dash por h√≠fen simples
        txt = txt.replace('‚Äì', '-').replace('‚Äî', '-')
        try:
            return txt.encode('latin-1', 'replace').decode('latin-1')
        except Exception:
            return ''.join(c if ord(c) < 256 else '-' for c in txt)

    def header(self):
        title = self._encode('Relat√≥rio TotalIA - PEAS.Co')
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, title, ln=True, align='C')
        self.ln(5)

    def add_results(self, results: dict):
        self.set_font('Arial', '', 12)
        for k, v in results.items():
            line = f"{k}: {v}"
            self.cell(0, 8, self._encode(line), ln=True)
        self.ln(5)

def generate_pdf_report(results: dict) -> str:
    pdf = PDFReport()
    pdf.add_page()

    # Introdu√ß√£o
    intro = 'Este relat√≥rio apresenta uma estimativa sobre a probabilidade de o texto ter sido gerado por IA.'
    pdf.set_font('Arial', '', 12)
    pdf.multi_cell(0, 8, pdf._encode(intro))
    pdf.ln(5)

    # Resultados num√©ricos
    pdf.add_results(results)

    # Explica√ß√£o detalhada da Avalia√ß√£o Roberta
    roberta_value = results['Roberta (IA)']
    pdf.ln(10)
    pdf.set_font('Arial', 'B', 14)
    pdf.cell(0, 10, pdf._encode('O que √© a "Avalia√ß√£o Roberta (Confiabilidade IA)"?'), ln=True)
    pdf.ln(2)

    explanation = (
        f"A 'Avalia√ß√£o Roberta (Confiabilidade IA)' representa a pontua√ß√£o gerada pelo modelo RoBerta "
        f"para indicar a probabilidade de que um texto tenha sido escrito por IA. "
        f"No seu relat√≥rio, o modelo atribuiu {roberta_value}.\n\n"
        "Como funciona o RoBerta:\n"
        "O RoBerta (Robustly optimized BERT approach) √© um modelo de NLP da Meta (Facebook AI), treinado "
        "com grandes volumes de texto para an√°lises sem√¢nticas profundas.\n\n"
        "Crit√©rios avaliados:\n"
        " - Coes√£o textual: IA costuma seguir padr√µes previs√≠veis.\n"
        " - Uso de conectores: express√µes como 'Portanto', 'Al√©m disso' s√£o frequentes.\n"
        " - Frases gen√©ricas: constru√ß√£o sofisticada, por√©m superficial.\n"
        " - Padr√µes lingu√≠sticos: falta de nuances humanas (ironias, ambiguidade).\n\n"
        
        " - Interpreta√ß√£o do valor - Entropia:\n"
        "0% - 3%    Alta probabilidade de IA (muito prov√°vel que o texto seja gerado por um modelo de linguagem como GPT, Bard, etc.)\n"
        "3% - 6%    Baixa probabilidade de IA (provavelmente texto humano)\n"
        
        " - Interpreta√ß√£o do valor - Roberta:\n"
        "0% - 30%    Baixa probabilidade de IA (provavelmente texto humano)\n"
        "30% - 60%   √Årea de incerteza (o texto pode conter partes geradas por IA ou apenas seguir um padr√£o formal)\n"
        "60% - 100%  Alta probabilidade de IA (muito prov√°vel que o texto seja gerado por um modelo de linguagem como GPT, Bard, etc.)"
    )
    pdf.set_font('Arial', '', 12)
    pdf.multi_cell(0, 8, pdf._encode(explanation))

    filename = "relatorio_IA.pdf"
    pdf.output(filename, 'F')
    return filename


# =============================
# üñ•Ô∏è Interface Streamlit
# =============================
st.title("üîç TotalIA - Detec√ß√£o de Texto Escrito por IA - PEAS.Co")
st.write("Fa√ßa o upload de um PDF para an√°lise:")

uploaded = st.file_uploader("Escolha um arquivo PDF", type="pdf")
if uploaded:
    texto = extract_text_from_pdf(uploaded)
    resultados = analyze_text(texto)

    st.subheader("üîé Resultados da An√°lise")
    for key, val in resultados.items():
        st.write(f"**{key}:** {val}")

    report_path = generate_pdf_report(resultados)
    with open(report_path, "rb") as f:
        st.download_button(
            "üì• Baixar Relat√≥rio em PDF",
            f.read(),
            "relatorio_IA.pdf",
            "application/pdf"
        )

# =============================
# üìã Registro de Usu√°rio (ao final)
# =============================
st.markdown("---")
st.subheader("üìã Registro de Usu√°rio - Cadastre-se")
nome = st.text_input("Nome completo", key="nome")
email = st.text_input("E-mail", key="email")
if st.button("Registrar meus dados"):
    if nome and email:
        salvar_email_google_sheets(nome, email)
    else:
        st.warning("‚ö†Ô∏è Preencha ambos os campos antes de registrar.")

# --- Se√ß√£o de Propaganda ---

  # Incorpora√ß√£o de website (exemplo de iframe para propaganda)
st.markdown(
    "<h3><a href='https://peas8810.hotmart.host/product-page-1f2f7f92-949a-49f0-887c-5fa145e7c05d' target='_blank'>"
    "T√©cnica PROATIVA: Domine a Cria√ß√£o de Comandos Poderosos na IA e gere produtos monetiz√°veis"
    "</a></h3>",
    unsafe_allow_html=True
)
st.components.v1.iframe("https://pay.hotmart.com/U99934745U?off=y2b5nihy&hotfeature=51&_hi=eyJjaWQiOiIxNzQ4Mjk4OTUxODE2NzQ2NTc3ODk4OTY0NzUyNTAwIiwiYmlkIjoiMTc0ODI5ODk1MTgxNjc0NjU3Nzg5ODk2NDc1MjUwMCIsInNpZCI6ImM4OTRhNDg0MzJlYzRhZTk4MTNjMDJiYWE2MzdlMjQ1In0=.1748375599003&bid=1748375601381", height=250)
